#!/usr/bin/env python3
import binascii
import argparse
import zlib

parser = argparse.ArgumentParser(description='Convert binary file to C-style array initializer.')
parser.add_argument("-i", "--input", help="the file to be converted")
parser.add_argument("-o", "--output", help="write output to a file")
parser.add_argument("-l", "--linebreak", type=int, default=8, help="add linebreak after every N element")
parser.add_argument("-z", "--use-zlib", type=int, help="zlib N level compresse before convert")
args = parser.parse_args()

if __name__ == "__main__":

    c_code:str = ""
    c_code += '// this file is generated by script, do not edit manually\n'
    c_code += '// do not include this file in other .h file\n'
    c_code += '// only include where the payload is used in .c file\n'
    c_code += '#include <stdint.h>\n'

    with open(args.input, 'rb') as f:
        file_content = f.read()
    
    if args.use_zlib:
        file_content_zlib = zlib.compress(file_content, level=args.use_zlib, wbits=15)
        file_content = file_content_zlib
        pass

    hexstr = binascii.hexlify(file_content).decode()
    hexstr = ["0x" + hexstr[i:i + 2] + ", " for i in range(0, len(hexstr), 2)]

    c_code += f'static const uint32_t payload_size = {len(hexstr)};\n'
    if args.use_zlib:
        c_code += f'static const int8_t payload_zlib_level = {args.use_zlib}; // zlib used\n'
    else:
        c_code += f'static const int8_t payload_zlib_level = 0xff; // zlib not used\n'
    c_code += f'static const __attribute__((section(".payload"), aligned(4))) uint8_t payload[{len(hexstr)}] = {{\n'

    if args.linebreak > 0:
        for i in range(0, len(hexstr), args.linebreak):
            c_code += '    '
            c_code += ''.join(hexstr[i:i+args.linebreak])
            c_code += '\n'

    c_code += '};\n'

    if args.output:
        with open(args.output, 'w') as f:
            f.write(c_code)
    else:
        print(c_code)